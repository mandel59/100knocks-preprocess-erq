-- 100knocks-preprocess.erq

/*
E-001: レシート明細データ（receipt）から全項目の先頭10件を表示し、どのようなデータを保有しているか目視で確認せよ。
*/

receipt limit 10;;

/*
E-002: レシート明細データ（receipt）から売上年月日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、10件表示せよ。
*/

receipt{sales_ymd, customer_id, product_cd, amount} limit 10;;

/*
E-003: レシート明細データ（receipt）から売上年月日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、10件表示せよ。ただし、sales_ymdをsales_dateに項目名を変更しながら抽出すること。
*/

receipt{sales_date: sales_ymd, customer_id, product_cd, amount} limit 10;;

/*
E-004: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の条件を満たすデータを抽出せよ。
- 顧客ID（customer_id）が"CS018205000001"
*/

receipt[customer_id='CS018205000001']{sales_ymd, customer_id, product_cd, amount};;

/*
E-005: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
- 顧客ID（customer_id）が"CS018205000001"
- 売上金額（amount）が1,000以上
*/

receipt[customer_id='CS018205000001'][amount >= 1000]{sales_ymd, customer_id, product_cd, amount};;

/*
E-006: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上数量（quantity）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
- 顧客ID（customer_id）が"CS018205000001"
- 売上金額（amount）が1,000以上または売上数量（quantity）が5以上
*/

receipt[customer_id='CS018205000001'][amount >= 1000 or quantity >= 5]{sales_ymd, customer_id, product_cd, amount};;

/*
E-007: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
- 顧客ID（customer_id）が"CS018205000001"
- 売上金額（amount）が1,000以上2,000以下
*/

receipt[customer_id='CS018205000001'][amount >= 1000 and amount <= 2000]{sales_ymd, customer_id, product_cd, amount};;

/*
E-008: レシート明細データ（receipt）から売上日（sales_ymd）、顧客ID（customer_id）、商品コード（product_cd）、売上金額（amount）の順に列を指定し、以下の全ての条件を満たすデータを抽出せよ。
- 顧客ID（customer_id）が"CS018205000001"
- 商品コード（product_cd）が"P071401019"以外
*/

receipt[customer_id='CS018205000001'][product_cd <> 'P071401019']{sales_ymd, customer_id, product_cd, amount};;

/*
E-009: 以下の処理において、出力結果を変えずにORをANDに書き換えよ。
`store[not (prefecture_cd = '13' or floor_area > 900)]`
*/

store[not prefecture_cd = '13' and not floor_area > 900];;

/*
E-010: 店舗データ（store）から、店舗コード（store_cd）が"S14"で始まるものだけ全項目抽出し、10件表示せよ。
*/

store[store_cd glob 'S14*'] limit 10;;

/*
E-011: 顧客データ（customer）から顧客ID（customer_id）の末尾が1のものだけ全項目抽出し、10件表示せよ。
*/

customer[customer_id glob '*1'] limit 10;;

/*
E-012: 店舗データ（store）から、住所 (address) に"横浜市"が含まれるものだけ全項目表示せよ。
*/

store[address glob '*横浜市*'];;

/*
E-013: 顧客データ（customer）から、ステータスコード（status_cd）の先頭がアルファベットのA〜Fで始まるデータを全項目抽出し、10件表示せよ。
*/

customer[status_cd glob '[A-F]*'] limit 10;;

/*
E-014: 顧客データ（customer）から、ステータスコード（status_cd）の末尾が数字の1〜9で終わるデータを全項目抽出し、10件表示せよ。
*/

customer[status_cd glob '*[1-9]'] limit 10;;

/*
E-015: 顧客データ（customer）から、ステータスコード（status_cd）の先頭がアルファベットのA〜Fで始まり、末尾が数字の1〜9で終わるデータを全項目抽出し、10件表示せよ。
*/

customer[status_cd glob '[A-F]*[1-9]'] limit 10;;

/*
E-016: 店舗データ（store）から、電話番号（tel_no）が3桁-3桁-4桁のデータを全項目表示せよ。
*/

store[tel_no glob '???-???-????'];;

/*
E-017: 顧客データ（customer）を生年月日（birth_day）で高齢順にソートし、先頭から全項目を10件表示せよ。
*/

customer order by birth_day limit 10;;

/*
E-018: 顧客データ（customer）を生年月日（birth_day）で若い順にソートし、先頭から全項目を10件表示せよ。
*/

customer order by birth_day desc limit 10;;

/*
E-019: レシート明細データ（receipt）に対し、1件あたりの売上金額（amount）が高い順にランクを付与し、先頭から10件表示せよ。項目は顧客ID（customer_id）、売上金額（amount）、付与したランクを表示させること。なお、売上金額（amount）が等しい場合は同一順位を付与するものとする。
*/

receipt{customer_id, amount, rank: over(order by amount desc) rank()} limit 10;;

/*
E-020: レシート明細データ（receipt）に対し、1件あたりの売上金額（amount）が高い順にランクを付与し、先頭から10件表示せよ。項目は顧客ID（customer_id）、売上金額（amount）、付与したランクを表示させること。なお、売上金額（amount）が等しい場合でも別順位を付与すること。
*/

receipt{customer_id, amount, rank: over(order by amount desc) row_number()} limit 10;;

/*
E-021: レシート明細データ（receipt）に対し、件数をカウントせよ。
*/

receipt{count()};;

/*
E-022: レシート明細データ（receipt）の顧客ID（customer_id）に対し、ユニーク件数をカウントせよ。
*/

receipt{count(distinct customer_id)};;

/*
E-023: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）と売上数量（quantity）を合計せよ。
*/

receipt{store_cd => sum(amount), sum(quantity)};;

/*
E-024: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も新しい売上年月日（sales_ymd）を求め、10件表示せよ。
*/

receipt{customer_id => max(sales_ymd)} limit 10;;

/*
E-025: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も古い売上年月日（sales_ymd）を求め、10件表示せよ。
*/

receipt{customer_id => min(sales_ymd)} limit 10;;

/*
E-026: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに最も新しい売上年月日（sales_ymd）と古い売上年月日を求め、両者が異なるデータを10件表示せよ。
*/

receipt{customer_id => max: max(sales_ymd), min: min(sales_ymd)}[max<>min] limit 10;;

/*
E-027: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の平均を計算し、降順でTOP5を表示せよ。
*/

receipt{store_cd => avg(amount) desc} limit 5;;

/*
E-028: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の中央値を計算し、降順でTOP5を表示せよ。
*/

receipt
  {store_cd, amount, ntile: over(partition by store_cd order by amount) ntile(2)}
  {store_cd => median: [ntile=1]max(amount)}
  order by median desc limit 5;;

/*
E-029: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに商品コード（product_cd）の最頻値を求め、10件表示させよ。
*/

with x as (receipt{store_cd, product_cd => count: count()})
with y as (x {store_cd => count: max(count)})
  x join y using (store_cd, count)
  {store_cd, product_cd, mode: count}
  limit 10;;

/*
E-030: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の分散を計算し、降順で5件表示せよ。
*/

receipt
  {store_cd, x: amount, avg_x: over(partition by store_cd) avg(amount)}
  {store_cd => variance: avg((x - avg_x)*(x - avg_x))}
  order by variance desc limit 5;;

/*
E-031: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の標準偏差を計算し、降順で5件表示せよ。
*/

receipt
  {store_cd, x: amount, avg_x: over(partition by store_cd) avg(amount)}
  {store_cd => sd: sqrt(avg((x - avg_x)*(x - avg_x)))}
  order by sd desc limit 5;;

/*
E-032: レシート明細データ（receipt）の売上金額（amount）について、25％刻みでパーセンタイル値を求めよ。
*/

receipt
  {amount, ntile: over(order by amount) ntile(4)}
  {
    amount_0p: min(amount),
    amount_25p: [ntile=1]max(amount),
    amount_50p: [ntile=2]max(amount),
    amount_75p: [ntile=3]max(amount),
    amount_100p: [ntile=4]max(amount)};;

/*
E-033: レシート明細データ（receipt）に対し、店舗コード（store_cd）ごとに売上金額（amount）の平均を計算し、330以上のものを抽出せよ。
*/

receipt{store_cd => avg: avg(amount)}[avg >= 330];;

/*
E-034: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに売上金額（amount）を合計して全顧客の平均を求めよ。ただし、顧客IDが"Z"から始まるものは非会員を表すため、除外して計算すること。
*/

receipt[customer_id not glob 'Z*']{customer_id => sum_amount: sum(amount)}{avg_sum_amount: avg(sum_amount)};;

/*
E-035: レシート明細データ（receipt）に対し、顧客ID（customer_id）ごとに売上金額（amount）を合計して全顧客の平均を求め、平均以上に買い物をしている顧客を抽出し、10件表示せよ。ただし、顧客IDが"Z"から始まるものは非会員を表すため、除外して計算すること。
*/

with customer_sum_amount as (receipt[customer_id not glob 'Z*']{customer_id => sum_amount: sum(amount)})
  customer_sum_amount[sum_amount >= from customer_sum_amount{avg(sum_amount)}]
  limit 10;;

/*
E-036: レシート明細データ（receipt）と店舗データ（store）を内部結合し、レシート明細データの全項目と店舗データの店舗名（store_name）を10件表示せよ。
*/

receipt join store using (store_cd) {receipt.*, store.store_name} limit 10;;

/*
E-037: 商品データ（product）とカテゴリデータ（category）を内部結合し、商品データの全項目とカテゴリデータのカテゴリ小区分名（category_small_name）を10件表示せよ。
*/

product join category using (category_small_cd) {product.*, category.category_small_name} limit 10;;

/*
E-038: 顧客データ（customer）とレシート明細データ（receipt）から、顧客ごとの売上金額合計を求め、10件表示せよ。ただし、売上実績がない顧客については売上金額を0として表示させること。また、顧客は性別コード（gender_cd）が女性（1）であるものを対象とし、非会員（顧客IDが"Z"から始まるもの）は除外すること。
*/

customer left join receipt using (customer_id)
  [gender_cd = '1' and customer_id not glob 'Z*']
  {customer_id => sum_amount: coalesce(sum(amount), 0)}
  limit 10;;

/*
E-039: レシート明細データ（receipt）から、売上日数の多い顧客の上位20件を抽出したデータと、売上金額合計の多い顧客の上位20件を抽出したデータをそれぞれ作成し、さらにその2つを完全外部結合せよ。ただし、非会員（顧客IDが"Z"から始まるもの）は除外すること。
*/

with member_receipt as (receipt[customer_id not glob 'Z*'])
  t1: (member_receipt{customer_id => unique_sales_ymd: count(distinct sales_ymd) desc} limit 20)
  full join
  t2: (member_receipt{customer_id => sum_amount: sum(amount) desc} limit 20)
  using (customer_id);;

/*
E-040: 全ての店舗と全ての商品を組み合わせたデータを作成したい。店舗データ（store）と商品データ（product）を直積し、件数を計算せよ。
*/

store join product {count()};;

/*
E-041: レシート明細データ（receipt）の売上金額（amount）を日付（sales_ymd）ごとに集計し、前回売上があった日からの売上金額増減を計算せよ。そして結果を10件表示せよ。
*/

receipt{sales_ymd => sum_amount: sum(amount)}
  {sales_ymd, sum_amount, diff: sum_amount - over(order by sales_ymd) lag(sum_amount, 1)}
  limit 10;;

/*
E-042: レシート明細データ（receipt）の売上金額（amount）を日付（sales_ymd）ごとに集計し、各日付のデータに対し、前回、前々回、3回前に売上があった日のデータを結合せよ。そして結果を10件表示せよ。
*/

receipt{sales_ymd => sum_amount: sum(amount)}
  {sales_ymd, sum_amount,
    lag1: over(order by sales_ymd) lag(sum_amount, 1),
    lag2: over(order by sales_ymd) lag(sum_amount, 2),
    lag3: over(order by sales_ymd) lag(sum_amount, 3)}
  limit 10;;

/*
E-043: レシート明細データ（receipt）と顧客データ（customer）を結合し、性別コード（gender_cd）と年代（ageから計算）ごとに売上金額（amount）を合計した売上サマリデータを作成せよ。性別コードは0が男性、1が女性、9が不明を表すものとする。

ただし、項目構成は年代、女性の売上金額、男性の売上金額、性別不明の売上金額の4項目とすること（縦に年代、横に性別のクロス集計）。また、年代は10歳ごとの階級とすること。
*/

customer left join receipt using (customer_id)
  {age_bin: floor(age / 10) * 10 =>
    female_amount: [gender_cd='1']sum(amount),
    male_amount: [gender_cd='0']sum(amount),
    unknown_amount: [gender_cd='9']sum(amount)};;

/*
E-044: 043で作成した売上サマリデータ（sales_summary）は性別の売上を横持ちさせたものであった。このデータから性別を縦持ちさせ、年代、性別コード、売上金額の3項目に変換せよ。ただし、性別コードは男性を"00"、女性を"01"、不明を"99"とする。
*/

with sales_summary as (
  customer left join receipt using (customer_id)
  {age_bin: floor(age / 10) * 10 =>
    female_amount: [gender_cd='1']sum(amount),
    male_amount: [gender_cd='0']sum(amount),
    unknown_amount: [gender_cd='9']sum(amount)}
)
  sales_summary{age_bin, gender_cd: '00', male_amount};
  sales_summary{age_bin, gender_cd: '01', female_amount};
  sales_summary{age_bin, gender_cd: '99', unknown_amount};;

/*
E-045: 顧客データ（customer）の生年月日（birth_day）は日付型でデータを保有している。これをYYYYMMDD形式の文字列に変換し、顧客ID（customer_id）とともに10件表示せよ。
*/

customer{customer_id, birth_day: strftime('%Y%m%d', birth_day)} limit 10;;

/*
E-046: 顧客データ（customer）の申し込み日（application_date）はYYYYMMDD形式の文字列型でデータを保有している。これを日付型に変換し、顧客ID（customer_id）とともに10件表示せよ。
*/

customer{customer_id, application_date: regexp_replace(application_date, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')} limit 10;;

/*
E-047: レシート明細データ（receipt）の売上日（sales_ymd）はYYYYMMDD形式の数値型でデータを保有している。これを日付型に変換し、レシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
*/

-- regexp_replaceの第一引数は数値→文字列に暗黙に型変換される
receipt{receipt_no, receipt_sub_no, sales_ymd: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')} limit 10;;

/*
E-048: レシート明細データ（receipt）の売上エポック秒（sales_epoch）は数値型のUNIX秒でデータを保有している。これを日付型に変換し、レシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
*/

receipt{receipt_no, receipt_sub_no, sales_date: date(sales_epoch, 'unixepoch')} limit 10;;

/*
E-049: レシート明細データ（receipt）の売上エポック秒（sales_epoch）を日付型に変換し、「年」だけ取り出してレシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。
*/

receipt{receipt_no, receipt_sub_no, sales_date: strftime('%Y', sales_epoch, 'unixepoch')} limit 10;;

/*
E-050: レシート明細データ（receipt）の売上エポック秒（sales_epoch）を日付型に変換し、「月」だけ取り出してレシート番号(receipt_no)、レシートサブ番号（receipt_sub_no）とともに10件表示せよ。なお、「月」は0埋め2桁で取り出すこと。
*/

receipt{receipt_no, receipt_sub_no, sales_date: strftime('%m', sales_epoch, 'unixepoch')} limit 10;;

/*
E-052: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計の上、売上金額合計に対して2,000円以下を0、2,000円より大きい金額を1に二値化し、顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
*/

with customer_sum_amount as (receipt[customer_id not glob 'Z*']{customer_id => sum_amount: sum(amount)})
  customer_sum_amount{customer_id, sum_amount, bin: case when sum_amount <= 2000 then 0 else 1 end}
  limit 10;;

/*
E-053: 顧客データ（customer）の郵便番号（postal_cd）に対し、東京（先頭3桁が100〜209のもの）を1、それ以外のものを0に二値化せよ。さらにレシート明細データ（receipt）と結合し、全期間において売上実績のある顧客数を、作成した二値ごとにカウントせよ。
*/

with customer_postal_cd as (customer{customer_id, postal_cd, bin: case when substr(postal_cd, 1, 3) between '100' and '209' then 1 else 0 end})
  customer_postal_cd join receipt using (customer_id)
  {bin => count: count(distinct customer_id)};;

/*
E-054: 顧客データ（customer）の住所（address）は、埼玉県、千葉県、東京都、神奈川県のいずれかとなっている。都道府県毎にコード値を作成し、顧客ID、住所とともに10件表示せよ。値は埼玉県を11、千葉県を12、東京都を13、神奈川県を14とすること。
*/

with prefectures(prefecture_cd, prefecture) as (values [
  {11, '埼玉県'},
  {12, '千葉県'},
  {13, '東京都'},
  {14, '神奈川県'}
])
  customer join prefectures on customer.address glob E'\(prefecture)*'
  {customer_id, address, prefecture_cd} limit 10;;

/*
E-055: レシート明細（receipt）データの売上金額（amount）を顧客ID（customer_id）ごとに合計し、その合計金額の四分位点を求めよ。その上で、顧客ごとの売上金額合計に対して以下の基準でカテゴリ値を作成し、顧客ID、売上金額合計とともに10件表示せよ。カテゴリ値は順に1〜4とする。

- 最小値以上第1四分位未満 ・・・ 1を付与
- 第1四分位以上第2四分位未満 ・・・ 2を付与
- 第2四分位以上第3四分位未満 ・・・ 3を付与
- 第3四分位以上 ・・・ 4を付与
*/

receipt{customer_id => sum_amount: sum(amount)}
  {customer_id, sum_amount, ntile: over(order by sum_amount) ntile(4)}
  order by customer_id
  limit 10;;

/*
E-056: 顧客データ（customer）の年齢（age）をもとに10歳刻みで年代を算出し、顧客ID（customer_id）、生年月日（birth_day）とともに10件表示せよ。ただし、60歳以上は全て60歳代とすること。年代を表すカテゴリ名は任意とする。
*/

customer{*, age_bin: floor(age / 10) * 10}
  {customer_id, birth_day, nendai: case when age_bin >= 60 then 60 else age_bin end}
  limit 10;;

/*
E-057: 056の抽出結果と性別コード（gender_cd）により、新たに性別×年代の組み合わせを表すカテゴリデータを作成し、10件表示せよ。組み合わせを表すカテゴリの値は任意とする。
*/

customer{*, age_bin: floor(age / 10) * 10}
  {customer_id, birth_day, gender_cd, nendai: case when age_bin >= 60 then 60 else age_bin end}
  {customer_id, birth_day, category: E'\(gender_cd)\(nendai)'}
  limit 10;;

/*
E-058: 顧客データ（customer）の性別コード（gender_cd）をダミー変数化し、顧客ID（customer_id）とともに10件表示せよ。
*/

-- SQLiteバックエンドのErqでは真理値はそのまま整数値の0/1として扱われる。
customer{customer_id, male: gender_cd = '0', female: gender_cd = '1', unknown: gender_cd = '9'} limit 10;;

/*
E-059: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を平均0、標準偏差1に標準化して顧客ID、売上金額合計とともに10件表示せよ。標準化に使用する標準偏差は、分散の平方根、もしくは不偏分散の平方根のどちらでも良いものとする。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
*/

receipt[customer_id not glob 'Z*']
  {customer_id => sum_amount: sum(amount)}
  {customer_id, sum_amount, avg: over() avg(sum_amount), count: over() count() }
  {customer_id, sum_amount, avg, sd: sqrt(over() sum((sum_amount - avg)*(sum_amount - avg)) / (count - 1))}
  {customer_id, sum_amount, std_amount: (sum_amount - avg) / sd}
  limit 10;;

/*
E-060: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を最小値0、最大値1に正規化して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
*/

receipt[customer_id not glob 'Z*']
  {customer_id => sum_amount: sum(amount)}
  {customer_id, sum_amount, min: over() min(sum_amount), max: over() max(sum_amount) }
  {customer_id, sum_amount, normalized_amount: (cast(sum_amount as real) - min) / (max - min)}
  limit 10;;

/*
E-061: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を常用対数化（底10）して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
*/

receipt[customer_id not glob 'Z*']
  {customer_id => sum_amount: sum(amount)}
  {customer_id, sum_amount, log10(sum_amount) }
  limit 10;;

/*
E-062: レシート明細データ（receipt）の売上金額（amount）を顧客ID（customer_id）ごとに合計し、売上金額合計を自然対数化（底e）して顧客ID、売上金額合計とともに10件表示せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。
*/

receipt[customer_id not glob 'Z*']
  {customer_id => sum_amount: sum(amount)}
  {customer_id, sum_amount, log(sum_amount) }
  limit 10;;

/*
E-063: 商品データ（product）の単価（unit_price）と原価（unit_cost）から各商品の利益額を算出し、結果を10件表示せよ。
*/

product{product_cd, unit_price, unit_cost, unit_profit: unit_price - unit_cost} limit 10;;

/*
E-064: 商品データ（product）の単価（unit_price）と原価（unit_cost）から、各商品の利益率の全体平均を算出せよ。ただし、単価と原価には欠損が生じていることに注意せよ。
*/

product{product_cd, unit_price, unit_cost, profit_margin: cast(unit_price - unit_cost as real) / unit_price}
  { avg_profit_margin: avg(profit_margin) };;

/*
E-065: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。ただし、1円未満は切り捨てること。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
*/

product{product_cd, unit_price, unit_cost, new_price: trunc(unit_cost / (1.0 - 0.3))}
  {product_cd, unit_price, unit_cost, new_price, new_profit_margin: cast(new_price - unit_cost as real) / new_price}
  limit 10;;

/*
E-066: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。今回は、1円未満を丸めること（四捨五入または偶数への丸めで良い）。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
*/

product{product_cd, unit_price, unit_cost, new_price: round(unit_cost / (1.0 - 0.3))}
  {product_cd, unit_price, unit_cost, new_price, new_profit_margin: cast(new_price - unit_cost as real) / new_price}
  limit 10;;

/*
E-067: 商品データ（product）の各商品について、利益率が30%となる新たな単価を求めよ。今回は、1円未満を切り上げること。そして結果を10件表示させ、利益率がおよそ30％付近であることを確認せよ。ただし、単価（unit_price）と原価（unit_cost）には欠損が生じていることに注意せよ。
*/

product{product_cd, unit_price, unit_cost, new_price: ceil(unit_cost / (1.0 - 0.3))}
  {product_cd, unit_price, unit_cost, new_price, new_profit_margin: cast(new_price - unit_cost as real) / new_price}
  limit 10;;

/*
E-068: 商品データ（product）の各商品について、消費税率10％の税込み金額を求めよ。1円未満の端数は切り捨てとし、結果を10件表示せよ。ただし、単価（unit_price）には欠損が生じていることに注意せよ。
*/

product{product_cd, unit_price, tax_included_price: trunc(unit_price * 1.1)} limit 10;;

/*
E-069: レシート明細データ（receipt）と商品データ（product）を結合し、顧客毎に全商品の売上金額合計と、カテゴリ大区分コード（category_major_cd）が"07"（瓶詰缶詰）の売上金額合計を計算の上、両者の比率を求めよ。抽出対象はカテゴリ大区分コード"07"（瓶詰缶詰）の売上実績がある顧客のみとし、結果を10件表示せよ。
*/

receipt join product using (product_cd)
  {customer_id => sum_amount: sum(amount), sum_amount_07: [category_major_cd = '07']sum(amount)}
  {*, ratio: cast(sum_amount_07 as real) / sum_amount}
  [sum_amount_07 is not null]
  limit 10;;

/*
E-070: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過日数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。
*/

receipt join customer using (customer_id)
  {
    customer_id,
    sales_date: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3'),
    application_date: regexp_replace(application_date, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')
  }
  {
    customer_id,
    sales_date,
    application_date,
    elapsed_days: julianday(sales_date) - julianday(application_date)
  }
  limit 10;;

/*
E-071: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過月数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。1ヶ月未満は切り捨てること。
*/

receipt join customer using (customer_id)
  {
    customer_id,
    sales_date: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3'),
    application_date: regexp_replace(application_date, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')
  }
  {
    customer_id,
    sales_date,
    application_date,
    diff: timediff(sales_date, application_date)
  }
  {
    customer_id,
    sales_date,
    application_date,
    diff,
    elapsed_months: 12 * substr(diff, 1, 5) + substr(diff, 7, 2)
  }
  limit 10;;

/*
E-072: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からの経過年数を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。1年未満は切り捨てること。
*/

receipt join customer using (customer_id)
  {
    customer_id,
    sales_date: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3'),
    application_date: regexp_replace(application_date, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')
  }
  {
    customer_id,
    sales_date,
    application_date,
    diff: timediff(sales_date, application_date)
  }
  {
    customer_id,
    sales_date,
    application_date,
    diff,
    elapsed_years: cast(substr(diff, 1, 5) as integer)
  }
  limit 10;;

/*
E-073: レシート明細データ（receipt）の売上日（sales_ymd）に対し、顧客データ（customer）の会員申込日（application_date）からのエポック秒による経過時間を計算し、顧客ID（customer_id）、売上日、会員申込日とともに10件表示せよ（なお、sales_ymdは数値、application_dateは文字列でデータを保持している点に注意）。なお、時間情報は保有していないため各日付は0時0分0秒を表すものとする。
*/

receipt join customer using (customer_id)
  {
    customer_id,
    sales_date: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3'),
    application_date: regexp_replace(application_date, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')
  }
  {
    customer_id,
    sales_date,
    application_date,
    elapsed_seconds: unixepoch(sales_date) - unixepoch(application_date)
  }
  limit 10;;

/*
E-074: レシート明細データ（receipt）の売上日（sales_ymd）に対し、当該週の月曜日からの経過日数を計算し、売上日、直前の月曜日付とともに10件表示せよ（sales_ymdは数値でデータを保持している点に注意）。
*/

receipt join customer using (customer_id)
  {sales_date: regexp_replace(sales_ymd, '(\d{4})(\d{2})(\d{2})', '$1-$2-$3')}
  {*, days_after_monday: strftime('%u', sales_date) - 1}
  {*, monday_date: date(julianday(sales_date) - days_after_monday)}
  limit 10;;

/*
E-075: 顧客データ（customer）からランダムに1%のデータを抽出し、先頭から10件表示せよ。
*/

with samples as (
  customer
    {
      customer_id,
      i: over(order by random()) row_number(),
      c: over() count()
    }
    [i <= c * 0.01]
    {customer_id}
)
customer
  [customer_id in samples]
  limit 10;;

/*
E-076: 顧客データ（customer）から性別コード（gender_cd）の割合に基づきランダムに10%のデータを層化抽出し、性別コードごとに件数を集計せよ。
*/

with samples as (
  customer
    {
      customer_id,
      i: over(partition by gender_cd order by random()) row_number(),
      c: over(partition by gender_cd) count()
    }
    [i <= c * 0.1]
    {customer_id}
)
customer
  [customer_id in samples]
  {gender_cd => count()};;

/*
E-077: レシート明細データ（receipt）の売上金額を顧客単位に合計し、合計した売上金額の外れ値を抽出せよ。なお、外れ値は売上金額合計を対数化したうえで平均と標準偏差を計算し、その平均から3σを超えて離れたものとする（自然対数と常用対数のどちらでも可）。結果は10件表示せよ。
*/

receipt
  {customer_id => sum_amount: sum(amount), log_sum_amount: ln(sum(amount))}
  {*, avg: over() avg(log_sum_amount)}
  {*, sd: sqrt(over() avg((log_sum_amount - avg)*(log_sum_amount - avg)))}
  [abs(log_sum_amount - avg) / sd > 3]
  limit 10;;

/*
E-078: レシート明細データ（receipt）の売上金額（amount）を顧客単位に合計し、合計した売上金額の外れ値を抽出せよ。ただし、顧客IDが"Z"から始まるのものは非会員を表すため、除外して計算すること。なお、ここでは外れ値を第1四分位と第3四分位の差であるIQRを用いて、「第1四分位数-1.5×IQR」を下回るもの、または「第3四分位数+1.5×IQR」を超えるものとする。結果は10件表示せよ。
*/

with customer_sum_amount as (
  receipt[customer_id not glob 'Z*']
  {customer_id => sum_amount: sum(amount)}
)
with stats as (
  customer_sum_amount
  {customer_id, sum_amount, ntile: over(order by sum_amount) ntile(4)}
  {
    q1: [ntile=1]max(sum_amount),
    q3: [ntile=3]max(sum_amount)
  }
  {*, iqr: q3 - q1}
)
customer_sum_amount join stats
  [sum_amount < q1 - 1.5 * iqr or sum_amount > q3 + 1.5 * iqr]
  {customer_sum_amount.*}
  limit 10;;

/*
E-079: 商品データ（product）の各項目に対し、欠損数を確認せよ。
*/
product {
  product_cd: [product_cd is null] count(),
  category_major_cd: [category_major_cd is null] count(),
  category_small_cd: [category_small_cd is null] count(),
  unit_price: [unit_price is null] count(),
  unit_cost: [unit_cost is null] count()
};;

/*
E-080: 商品データ（product）のいずれかの項目に欠損が発生しているレコードを全て削除した新たな商品データを作成せよ。なお、削除前後の件数を表示させ、079で確認した件数だけ減少していることも確認すること。
*/

drop table if exists product_cleaned;;
create table product_cleaned as
  product
    [product_cd is not null]
    [category_major_cd is not null]
    [category_small_cd is not null]
    [unit_price is not null]
    [unit_cost is not null];;

{
  before: from product {count()},
  after: from product_cleaned {count()}
};;

/*
E-081: 単価（unit_price）と原価（unit_cost）の欠損値について、それぞれの平均値で補完した新たな商品データを作成せよ。なお、平均値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
*/

drop table if exists product_imputed;;
create table product_imputed as product;;

with stats as (
  product {
    avg_unit_price: round(avg(unit_price)),
    avg_unit_cost: round(avg(unit_cost))
  }
)
update product_imputed[unit_price is null or unit_cost is null]
  set unit_price = coalesce(unit_price, from stats{avg_unit_price})
  set unit_cost = coalesce(unit_cost, from stats{avg_unit_price});;

product_imputed {
  product_cd: [product_cd is null] count(),
  category_major_cd: [category_major_cd is null] count(),
  category_small_cd: [category_small_cd is null] count(),
  unit_price: [unit_price is null] count(),
  unit_cost: [unit_cost is null] count()
};;

/*
E-082: 単価（unit_price）と原価（unit_cost）の欠損値について、それぞれの中央値で補完した新たな商品データを作成せよ。なお、中央値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
*/

drop table if exists product_imputed_2;;
create table product_imputed_2 as product;;

with stats as (
  product
    {
      *,
      ntile_unit_price: over(order by unit_price) ntile(2),
      ntile_unit_cost: over(order by unit_cost) ntile(2)
    }
    {
      median_unit_price: round([ntile_unit_price=1]max(unit_price)),
      median_unit_cost: round([ntile_unit_cost=1]max(unit_cost))
    }
)
update product_imputed_2[unit_price is null or unit_cost is null]
  set unit_price = coalesce(unit_price, from stats{median_unit_price})
  set unit_cost = coalesce(unit_cost, from stats{median_unit_cost});;

product_imputed_2 {
  product_cd: [product_cd is null] count(),
  category_major_cd: [category_major_cd is null] count(),
  category_small_cd: [category_small_cd is null] count(),
  unit_price: [unit_price is null] count(),
  unit_cost: [unit_cost is null] count()
};;

/*
E-083: 単価（unit_price）と原価（unit_cost）の欠損値について、各商品のカテゴリ小区分コード（category_small_cd）ごとに算出した中央値で補完した新たな商品データを作成せよ。なお、中央値については1円未満を丸めること（四捨五入または偶数への丸めで良い）。補完実施後、各項目について欠損が生じていないことも確認すること。
*/

drop table if exists product_imputed_3;;
create table product_imputed_3 as product;;

with stats as (
  product
    {
      *,
      ntile_unit_price: over(partition by category_small_cd order by unit_price) ntile(2),
      ntile_unit_cost: over(partition by category_small_cd order by unit_cost) ntile(2)
    }
    {
      category_small_cd =>
      median_unit_price: round([ntile_unit_price=1]max(unit_price)),
      median_unit_cost: round([ntile_unit_cost=1]max(unit_cost))
    }
)
update product_imputed_3[unit_price is null or unit_cost is null]
  set unit_price = coalesce(unit_price, from stats[stats.category_small_cd = product_imputed_3.category_small_cd]{median_unit_price})
  set unit_cost = coalesce(unit_cost, from stats[stats.category_small_cd = product_imputed_3.category_small_cd]{median_unit_cost});;

product_imputed_3 {
  product_cd: [product_cd is null] count(),
  category_major_cd: [category_major_cd is null] count(),
  category_small_cd: [category_small_cd is null] count(),
  unit_price: [unit_price is null] count(),
  unit_cost: [unit_cost is null] count()
};;

/*
E-084: 顧客データ（customer）の全顧客に対して全期間の売上金額に占める2019年売上金額の割合を計算し、新たなデータを作成せよ。ただし、売上実績がない場合は0として扱うこと。そして計算した割合が0超のものを抽出し、結果を10件表示せよ。また、作成したデータに欠損が存在しないことを確認せよ。
*/

drop table if exists sales_2019_ratio;;
create table sales_2019_ratio as
  customer left join receipt using (customer_id)
  {
    customer_id =>
    sum_amount: coalesce(sum(amount), 0),
    sum_amount_2019: coalesce([sales_ymd >= 20190000 and sales_ymd < 20200000]sum(amount), 0)
  }
  {*, ratio: coalesce(cast(sum_amount_2019 as real) / sum_amount, 0)};;

sales_2019_ratio[ratio > 0] limit 10;;

sales_2019_ratio
  {
    [customer_id is null]count(),
    [sum_amount is null]count(),
    [sum_amount_2019 is null]count(),
    [ratio is null]count()
  };;

/*
E-085: 顧客データ（customer）の全顧客に対し、郵便番号（postal_cd）を用いてジオコードデータ（geocode）を紐付け、新たな顧客データを作成せよ。ただし、1つの郵便番号（postal_cd）に複数の経度（longitude）、緯度（latitude）情報が紐づく場合は、経度（longitude）、緯度（latitude）の平均値を算出して使用すること。また、作成結果を確認するために結果を10件表示せよ。
*/

drop table if exists customer_coordinates;;
create table customer_coordinates as
  with geocode_avg as (
    geocode
      {postal_cd => longitude: avg(longitude), latitude: avg(latitude)}
  )
  customer left join geocode_avg using (postal_cd)
    {
      customer.*,
      longitude,
      latitude
    };;

customer_coordinates limit 10;;

/*
E-086: 085で作成した緯度経度つき顧客データに対し、会員申込店舗コード（application_store_cd）をキーに店舗データ（store）と結合せよ。そして申込み店舗の緯度（latitude）・経度情報（longitude)と顧客住所（address）の緯度・経度を用いて申込み店舗と顧客住所の距離（単位：km）を求め、顧客ID（customer_id）、顧客住所（address）、店舗住所（address）とともに表示せよ。計算式は以下の簡易式で良いものとするが、その他精度の高い方式を利用したライブラリを利用してもかまわない。結果は10件表示せよ。

緯度（ラジアン）：φ
経度（ラジアン）：λ
距離 L = 6371 * arccos(sin φ1 * sin φ2 + cos φ1 * cos φ2 * cos(λ1 − λ2))
*/

c: customer_coordinates join s: store on c.application_store_cd = s.store_cd
  {
    customer_id,
    customer_address: c.address,
    store_address: s.address,
    distance: 6371 * acos(sin(c.latitude * pi() / 180) * sin(s.latitude * pi() / 180) + cos(c.latitude * pi() / 180) * cos(s.latitude * pi() / 180) * cos((c.longitude - s.longitude) * pi() / 180))
  }
  limit 10;;

/*
E-087: 顧客データ（customer）では、異なる店舗での申込みなどにより同一顧客が複数登録されている。名前（customer_name）と郵便番号（postal_cd）が同じ顧客は同一顧客とみなして1顧客1レコードとなるように名寄せした名寄顧客データを作成し、顧客データの件数、名寄顧客データの件数、重複数を算出せよ。ただし、同一顧客に対しては売上金額合計が最も高いものを残し、売上金額合計が同一もしくは売上実績がない顧客については顧客ID（customer_id）の番号が小さいものを残すこととする。
*/

drop table if exists customer_amount;;
create table customer_amount as
  customer join (
    customer left join receipt using (customer_id)
    {customer_id => sum_amount: coalesce(sum(amount), 0)}
  ) using (customer_id);;

create index customer_amount_idx_1 on customer_amount(customer_name, postal_cd);;

drop table if exists customer_unique;;
create table customer_unique as
  customer_amount
    {*, id: over(partition by customer_name, postal_cd order by sum_amount desc, customer_id) first_value(customer_id) }
    [customer_id = id]
    {customer_id,customer_name,gender_cd,gender,birth_day,age,postal_cd,address,application_store_cd,application_date,status_cd};;

{
  顧客データの件数: from customer{count()},
  名寄顧客データの件数: from customer_unique{count()}
}
{*, 重複数: 顧客データの件数 - 名寄顧客データの件数};;

/*
E-088: 087で作成したデータを元に、顧客データに統合名寄IDを付与したデータを作成せよ。ただし、統合名寄IDは以下の仕様で付与するものとする。

- 重複していない顧客：顧客ID（customer_id）を設定
- 重複している顧客：前設問で抽出したレコードの顧客IDを設定

顧客IDのユニーク件数と、統合名寄IDのユニーク件数の差も確認すること。
*/

create index customer_unique_idx_1 on customer_unique(customer_name, postal_cd);;

drop table if exists customer_2;;
create table customer_2 as
  c: customer {*, unified_customer_id: from u: customer_unique[{u.customer_name, u.postal_cd} = {c.customer_name, c.postal_cd}]{customer_id}};;

{
  件数の差:
    from customer_2 {count(distinct customer_id)}
    - from customer_2 {count(distinct unified_customer_id)}
};;

/*
E-089: 売上実績がある顧客を、予測モデル構築のため学習用データとテスト用データに分割したい。それぞれ8:2の割合でランダムにデータを分割せよ。
*/

create temporary table customer_division as 
  customer[customer_id in receipt{customer_id}]
    {customer_id, i: over(order by random()) row_number(), c: over() count()}
    {
      customer_id,
      train_test: case when i <= c * 0.8 then 'train' else 'test' end
    };;

drop table if exists customer_train;;
create table customer_train as customer_division[customer_id in customer_division[train_test = 'train']{customer_id}];;

drop table if exists customer_test;;
create table customer_test as customer_division[customer_id in customer_division[train_test = 'test']{customer_id}];;

{train: from customer_train {count()}, test: from customer_test {count()}}
{*, total: train + test}
{*, train_ratio: cast(train as real) / total, test_ratio: cast(test as real) / total};;

/*
E-090: レシート明細データ（receipt）は2017年1月1日〜2019年10月31日までのデータを有している。売上金額（amount）を月次で集計し、学習用に12ヶ月、テスト用に6ヶ月の時系列モデル構築用データを3セット作成せよ。
*/

create temporary table sales_monthly as
  receipt
    {sales_ym: cast(substr(sales_ymd, 1, 6) as integer) => sum_amount: sum(amount)}
    {*, rn: over(order by sales_ym) row_number()};;

range(1, 3) foreach(@i=value, @t=E'series_data_\(value)') (
  drop table if exists @t;;
  create table @t as
    sales_monthly
      {
        sales_ym,
        sum_amount,
        k: rn - (@i - 1) * 6
      }
      [k between 1 and 18]
      {
        sales_ym,
        sum_amount,
        for_test: k > 12
      };;
);;

/*
E-091: 顧客データ（customer）の各顧客に対し、売上実績がある顧客数と売上実績がない顧客数が1:1となるようにアンダーサンプリングで抽出せよ。
*/

drop table if exists customer_downsampled;;
create table customer_downsampled as
  customer
    join (
      customer
      left join receipt
      using (customer_id)
      {customer_id => sum_amount: coalesce(sum(amount), 0)})
    using (customer_id)
    {*, has_sales: sum_amount > 0}
    {*,
      rn: over(partition by has_sales order by random()) row_number(),
      count_has_sales: over() [has_sales]count(),
      count_no_sales: over() [not has_sales]count()
    }
    [rn <= count_has_sales and rn <= count_no_sales];;

customer_downsampled {has_sales => count()};;

/*
E-092: 顧客データ（customer）の性別について、第三正規形へと正規化せよ。
*/

drop table if exists gender;;
create table gender(gender_cd text primary key, gender text);;
gender <- customer {gender_cd, gender} distinct;;

drop table if exists customer_3;;
create table customer_3 as customer {
  customer_id,
  customer_name,
  gender_cd,
  birth_day,
  age,
  postal_cd,
  address,
  application_store_cd,
  application_date,
  status_cd
};;

customer_3 limit 10;;

customer_3 join gender using (gender_cd) limit 10;;

/*
E-093: 商品データ（product）では各カテゴリのコード値だけを保有し、カテゴリ名は保有していない。カテゴリデータ（category）と組み合わせて非正規化し、カテゴリ名を保有した新たな商品データを作成せよ。
*/

drop table if exists product_category;;
create table product_category as product join category using (category_small_cd);;

/*
E-094: 093で作成したカテゴリ名付き商品データを以下の仕様でファイル出力せよ。

|ファイル形式|ヘッダ有無|文字エンコーディング|
|:--:|:--:|:--:|
|CSV（カンマ区切り）|有り|UTF-8|
*/

product_category output csv with header to 'output/product_category.csv';;
